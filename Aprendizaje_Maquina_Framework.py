# -*- coding: utf-8 -*-
"""Aprendizaje_Maquina_Framework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12zKFKzQVThWne9p9tCeGFikV177KYXSy

# Importación de los Datos
"""

import pandas as pd
import pandas as pd
import numpy as np
import os

# Nombre de las columnas
columns = ["Class", "Alcohol", "Malic Acid", "Ash", "Alcalinity of Ash", "Magnesium", "Total Phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline"]

# Importacion
data = pd.read_csv(os.path.join(os.path.dirname(__file__), "wine.data"))
data.columns = columns
print(data.info())

"""# Selección de los Datos
El modelo se encargará de predecir la clase de vino a la que pertenece cada registro, por ello, nuestro atributo "class" será la variable dependiente.

A continuación se realiza la division de variables, datos de entrenamiento y datos de prueba.
"""

from sklearn.model_selection import train_test_split

# Separacion variables independientes y dependiente
x = data[columns[1:]]
y = data[columns[0]]

# Separación de los datos de entrenamiento y de prueba. (70% entrenamiento / 30% Prueba)
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.7)

print('Total de datos:', len(data))
print('No. de datos de entreamiento:', len(x_train))
print('No. de datos para prediccion:', len(x_test))

"""# Implementacion del Modelo

##### Debido a que se busca asignar una clase a cada uno de los registros se necesita un modelo de clasificación, es por ello que se emplea el siguiente modelo:
---
### **Árbol de Decisión** / Métrica Calidad de Información: Entropía
"""

# Importacion del modelo
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier, export_graphviz

# Instanciación del modelo
model = DecisionTreeClassifier(criterion = "entropy")

# Entrenamiento del modelo
model.fit(x_train, y_train)

"""# Desempeño del modelo
Comparativa de desempeño del modelo con los datos de entrenamiento y los de prueba/validación
"""

from sklearn.metrics import r2_score, mean_squared_error

# Prediccion para el conjunto de datos de entrenamiento
train_prediction = model.predict(x_train)

# Prediccion para el conjunto de datos de prueba / validación
test_prediction = model.predict(x_test)


# Evaluación del modelo con los datos de entrenamiento
train_score = model.score(x_train, y_train)

# Evaluación del modelo con los datos de entrenamiento
test_score = model.score(x_test, y_test)

print("Presición Modelo Datos de Entrenamiento:", train_score)
print("Presición Modelo Datos de Prueba:", test_score)

"""# Visualización: Salida del Modelo"""

# Predicción de todos los datos
y_pred = model.predict(x)

# Comparación primeros 10 datos
comp_table = pd.DataFrame({'Real': data['Class'], 'Prediccion': y_pred})
print(comp_table.head(10))